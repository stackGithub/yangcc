import { message, notification, Modal as modal } from 'ant-design-vue'import $store from '/@/store'const setup = {  debug: $store.state.isDebug,  log: {    axios: true  }}const general = {  configer() {    // $obj == $ 标识 -- 对象    // fun  == 函数执行方法 无标识  },  $msg: {    success() {      c_ant.$message.success(...arguments)    }  },  /**   * 去掉开始，结尾空格   * @param { string } str   * @returns { string } str   */  trim(str) {    return String(str).replace(/(^\s*)|(\s*$)/g, '')  },  /**   *  数组对象深复制   * @param { array | object } data   * @return { array | object }   */  deepCopy(data) {    const res = data instanceof Array ? [] : {}    for (const key in data) {      if (data.hasOwnProperty(key)) {        res[key] = data[key] instanceof Object ? this.deepCopy(data[key]) : data[key]      }    }    return res  },  /**   * 浏览器复制功能   * @param content   * @param message   */  copyToClip(content, message) {    var aux = document.createElement('input')    aux.setAttribute('value', content)    document.body.appendChild(aux)    aux.select()    document.execCommand('copy')    document.body.removeChild(aux)    this.$msg.success({ content: '复制成功', key: 'copy' })  },  /**   * 获取数组对象中指定值 :: 根据id 获得name   * @param {Array<Object>} sourceArr  解析数据的源数据   * @param {String} val  需要解析的值value   * @param {String} idKey   value 在源数据中的 key   * @param {String} nameKey   value 获取的值在源数据中的 key   * @param {String} result   obj 获取的值类型   * @returns {String | Object}   */  getTargetValueInArr({ sourceArr, value, idKey = 'id', nameKey = 'name', result = '' }) {    try {      if (sourceArr instanceof Array) {        const temp = sourceArr.filter(item => item && item[idKey] === value)        if (result === 'obj') {          return temp[0]        } else {          return temp[0][nameKey]        }      } else {        return undefined      }    } catch (e) {      return undefined    }  },  /**   * 二维数组对象去重   * @param {Array | Array<Object>} sourceArr   * @param {String} idKey   * @returns {Array<Object>}   */  arraySet(sourceArr, idKey = 'id') {    if (sourceArr instanceof Array) {      if (sourceArr[0] instanceof Object) {        const checkArr = new Set()        return sourceArr.filter(item => {          if (!item) return false          if (checkArr.has(item[idKey])) {            return false          } else {            checkArr.add(item[idKey])            return true          }        })      } else {        return [...(new Set(sourceArr))]      }    } else {      return []    }  },  log(data, options = {}) {    if (!setup.debug) return    if (!setup.log.axios && options.type === 'axios') return    if (options.type === 'error') {      return new Error(data)    } else if (options.type === 'err') {      console.error(data)    } else if (options.type === 'axios') {      console.warn('%c ' + options.title || 'axios', 'color:rgb(3,162,228);font-size:15px;', data)    } else if (data instanceof Array) {      console.table(data)    } else {      options.css || (options.css = 'background:-webkit-linear-gradient(right,rgb(255,50,98),rgb(50,255,228))')      console.log('%c ' + options.title || '打印机', options.css, data)    }  },  /**   * 判断是否为空   * @param {*} val   * @return {boolean} true 空   */  isNull(val) {    if (typeof val == 'boolean') {      return false    }    if (typeof val == 'number') {      return false    }    if (val instanceof Array) {      if (val.length === 0) return true    } else if (val instanceof Object) {      if (JSON.stringify(val) === '{}') return true    } else {      return val === 'null' || val == null || val === 'undefined' || val === undefined || val === ''    }    return false  },  /**   * 防抖 (同方法会被覆盖)   */  debounce(fn, delay = 1000) {    let timeout    return function() {      // 重新计时      timeout && clearTimeout(timeout)      timeout = setTimeout(fn.bind(this), delay, ...arguments)    }  },  /**   * 节流 (同方法会被覆盖)   */  throttle(fn, delay = 1000) {    let timeout = null    return function() {      const context = this      // 重新计时      if (!timeout) {        timeout = setTimeout(() => {          // fn()          timeout = null          fn.apply(context, arguments)        }, delay)      }    }  },  /**   * 过滤对象中为空的属性   * @param obj   * @returns {*}   */  filterObj(obj) {    if (!(typeof obj == 'object')) {      return    }    for (const key in obj) {      if (obj.hasOwnProperty(key) &&        (obj[key] == null || obj[key] === undefined || obj[key] === '')) {        delete obj[key]      }    }    return obj  },  /**   * 随机生成数字   *   * 示例：生成长度为 12 的随机数：randomNumber(12)   * 示例：生成 3~23 之间的随机数：randomNumber(3, 23)   *   * @param1 最小值 | 长度   * @param2 最大值   * @return int 生成后的数字   */  randomNumber() {    // 生成 最小值 到 最大值 区间的随机数    const random = (min, max) => {      return Math.floor(Math.random() * (max - min + 1) + min)    }    if (arguments.length === 1) {      const [length] = arguments      // 生成指定长度的随机数字，首位一定不是 0      const nums = [...Array(length).keys()].map((i) => (i > 0 ? random(0, 9) : random(1, 9)))      return parseInt(nums.join(''))    } else if (arguments.length >= 2) {      const [min, max] = arguments      return random(min, max)    } else {      return Number.NaN    }  },  /**   * 随机生成字符串   * @param length 字符串的长度   * @param chats 可选字符串区间（只会生成传入的字符串中的字符）   * @return string 生成的字符串   */  randomString(length, chats) {    if (!length) length = 1    if (!chats) chats = '0123456789abcdefghijklmnopqrstuvwxyz'    let str = ''    for (let i = 0; i < length; i++) {      const num = this.randomNumber(0, chats.length - 1)      str += chats[num]    }    return str  },  /**   * 随机生成uuid   * @return string 生成的uuid   */  randomUUID() {    const chats = '0123456789abcdef'    return this.randomString(32, chats)  },  /**   * 下划线转驼峰   * @param string   * @returns {*}   */  underLineToCamelCase(string) {    return string.replace(/_([a-z])/g, function(all, letter) {      return letter.toUpperCase()    })  },  /**   * 增强CSS，可以在页面上输出全局css   * @param css 要增强的css   * @param id style标签的id，可以用来清除旧样式   */  cssExpand(css, id) {    const style = document.createElement('style')    style.type = 'text/css'    style.innerHTML = `@charset "UTF-8"; ${css}`    // 清除旧样式    if (id) {      const $style = document.getElementById(id)      if ($style != null) $style.outerHTML = ''      style.id = id    }    // 应用新样式    document.head.appendChild(style)  },  /**   * 文件保存至本地   * @param { string } filename 文件名   * @param { text } text 数据   */  download(filename, text) {    // download("data.txt",JSON.stringify(data));    var pom = document.createElement('a')    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))    pom.setAttribute('download', filename)    if (document.createEvent) {      var event = document.createEvent('MouseEvents')      event.initEvent('click', true, true)      pom.dispatchEvent(event)    } else {      pom.click()    }  },  /**   * 图片资源转化成 base64   * @param file   * @returns {Promise<unknown>}   */  getBase64(file) {    if (!file) return    return new Promise((resolve, reject) => {      const reader = new FileReader()      reader.readAsDataURL(file)      reader.onload = () => resolve(reader.result)      reader.onerror = error => reject(error)    })  },  // 金额数字转大写  changeNumMoneyToChinese(money) {      var cnNums = new Array("零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖"); //汉字的数字      var cnIntRadice = new Array("", "拾", "佰", "仟"); //基本单位      var cnIntUnits = new Array("", "万", "亿", "兆"); //对应整数部分扩展单位      var cnDecUnits = new Array("角", "分", "毫", "厘"); //对应小数部分单位      var cnInteger = "整"; //整数金额时后面跟的字符      var cnIntLast = "元"; //整型完以后的单位      var maxNum = 999999999999999.9999; //最大处理的数字      var IntegerNum; //金额整数部分      var DecimalNum; //金额小数部分      var ChineseStr = ""; //输出的中文金额字符串      var parts; //分离金额后用的数组，预定义      var Symbol = "";//正负值标记      if (money == "") {        return "";      }      money = parseFloat(money);      if (money >= maxNum) {        console.log('超出最大处理数字');        return "";      }      if (money == 0) {        ChineseStr = cnNums[0] + cnIntLast + cnInteger;        return ChineseStr;      }      if (money < 0) {        money = -money;        Symbol = "负 ";      }      money = money.toString(); //转换为字符串      if (money.indexOf(".") == -1) {        IntegerNum = money;        DecimalNum = '';      } else {        parts = money.split(".");        IntegerNum = parts[0];        DecimalNum = parts[1].substr(0, 4);      }      if (parseInt(IntegerNum, 10) > 0) { //获取整型部分转换        var zeroCount = 0;        var IntLen = IntegerNum.length;        for (var i = 0; i < IntLen; i++) {          var n = IntegerNum.substr(i, 1);          var p = IntLen - i - 1;          var q = p / 4;          var m = p % 4;          if (n == "0") {            zeroCount++;          }          else {            if (zeroCount > 0) {              ChineseStr += cnNums[0];            }            zeroCount = 0; //归零            ChineseStr += cnNums[parseInt(n)] + cnIntRadice[m];          }          if (m == 0 && zeroCount < 4) {            ChineseStr += cnIntUnits[q];          }        }        ChineseStr += cnIntLast;        //整型部分处理完毕      }      if (DecimalNum != '') { //小数部分        var decLen = DecimalNum.length;        for (var i = 0; i < decLen; i++) {          var n = DecimalNum.substr(i, 1);          if (n != '0') {            ChineseStr += cnNums[Number(n)] + cnDecUnits[i];          }        }      }      if (ChineseStr == '') {        ChineseStr += cnNums[0] + cnIntLast + cnInteger;      } else if (DecimalNum == '') {        ChineseStr += cnInteger;      }      ChineseStr = Symbol + ChineseStr;      return ChineseStr;  },  // 数字 加减}const c_vue = {  /**   * 页面滚动   * @param {vm} that 实例   * @param {String} targetRef 滚动目标元素   * @param {String} rangeRef  滚动距离元素   * @param {Object} options   * @param {String:once|normal} options.type  once:当前高度大于指定高度，则取消跳转   */  scrollView(that, targetRef, rangeRef, options) {    options = Object.assign({ limit: 'once' }, options)    const targetTop = that.$refs[targetRef].scrollTop    const sourceTop = that.$refs[rangeRef].scrollHeight    that.$nextTick(() => {      if (options.limit === 'once' && targetTop < sourceTop) {        that.$refs[targetRef].scrollTop = sourceTop      } else if (options.limit !== 'once') {        that.$refs[targetRef].scrollTop = sourceTop      }    })  },  /**   * 防抖   * @param vm  this   * @param callback   * @param delay   */  debounce(vm, callback, delay = 1000) {    const timeout = vm.isLoad || null    if (timeout) return    vm.isLoad = setTimeout(() => {      clearTimeout(vm.isLoad)      vm.isLoad = null      if (callback) callback()    }, delay)  },  /**   * 节流   * @param vm  this   * @param callback   * @param delay   */  throttle(vm, callback, delay = 1000) {    const timeout = vm.c_timeout || null    timeout && clearTimeout(vm.c_timeout)    vm.c_timeout = setTimeout(() => {      if (callback) callback()    }, delay)  }}const c_ant = {  $loadKeys: {    glo_load_key: 'glo_loading'  },  // import { message, notification,Modal as modal } from 'ant-design-vue'  /**   * 提示框   * $util.$message.success('msgsmgmsammg')   */  $message: { ...message },  /**   * 通知类弹出框   * $util.$notification.error({ message: '系统提示', description: msg, duration: 4 })   */  $notification: { ...notification },  /**   * 确认框   * $util.$modal.error({          title: '登录已过期',          content: '很抱歉，登录已过期，请重新登录',          okText: '重新登录',          mask: false,          onOk: () => {}        })   */  $modal: { ...modal }}const c_url = {  /**   * 获取地址栏参数   * @param { string } key   * @returns { string | null }   */  getUrlParams(key) {    const url = window.location.search    return this.getFixedUrlParams(url, key)  },  /**   * 获取指定 url 的参数   * @param { string } url   * @param { string } key   * @returns { string | null }   */  getFixedUrlParams(url, key) {    const search = '?' + url.split('?')[1]    const reg = new RegExp('(^|&)' + key + '=([^&]*)(&|$)')    const r = search.substr(1).match(reg)    if (r != null) {      return r[2]    }    return null  },  /**   * 刷新页面   * @param duration   * @return method   */  urlReload(duration = 200) {    setTimeout(() => {      window.location.reload()    }, duration)  },  /**   * 特殊字符   */  urlSpecialCode: [    { code: '=', code16: '%3D' },    { code: ':', code16: '%3A' },    { code: '#', code16: '%23' },    { code: ';', code16: '%3B' },    { code: '+', code16: '%2B' },    { code: '(', code16: '%28' },    { code: ')', code16: '%29' },    { code: ' ', code16: '%20' },    { code: '/', code16: '%2F' },    { code: '?', code16: '%3F' },    { code: '%', code16: '%25' },    { code: '&', code16: '%26' }  ],  /**   * url 编码   * @param url   * @returns url   */  urlEnCode(url) {    return encodeURI(url).replace(/=/g, '%3D').replace(/:/g, '%3A')      .replace(/#/g, '%23').replace(/;/g, '%3B')      .replace(/\(/g, '%28').replace(/\)/g, '%29')      .replace(/\//g, '%2F').replace(/\?/g, '%3F').replace(/&/g, '%26')  },  /**   * url 解码   * @param url   * @returns url   */  urlDeCode(url) {    return decodeURI(url.replace(/%3D/g, '=').replace(/%3A/g, ':')      .replace(/%23/g, '#').replace(/%3B/g, ';')      .replace(/%28/g, '(').replace(/%29/g, ')')      .replace(/%2F/g, '/').replace(/%3F/g, '?').replace(/%26/g, '&'))  },  /**   * url 格式转换  string <=> object   * @param {Object||String} data   */  formatUrl(data) {    if (typeof data == 'string') {      data = '???' + data      data = data.replace(/\?{3,}/g, '')      const arr = data.split('&')      const obj = {}      for (let i = 0; i < arr.length; i++) {        const subArr = arr[i].split('=')        obj[subArr[0]] = subArr[1]      }      return obj    } else if (typeof data == 'object') {      const arr = []      for (const key in data) {        arr.push(key + '=' + data[key])      }      const str = arr.join('&')      return str || ''    }  }}const c_date = {  /**   * 时间定位   * @returns {string}   */  timeFix() {    const time = new Date()    const hour = time.getHours()    return hour < 9 ? '早上好' : (hour <= 11 ? '上午好' : (hour <= 13 ? '中午好' : (hour < 20 ? '下午好' : '晚上好')))  },  /**   * 时间格式化   * @param value   * @param fmt   * @param { string } lang (en | cn)   *  yyyy-MM-dd hh:mm:ss:S q w   *  年-月-日 时:分:秒:毫秒 季度 星期   * @returns {*|string}   */  formatDateType: {    0: 'yyyy-MM-dd hh:mm:ss',    1: 'yyyy-MM-dd',    2: 'MM-dd',    3: 'hh:mm:ss',    4: 'hh:mm',    5: 'yyyy年MM月dd号 hh时mm分ss秒S毫秒 第q季度 星期w',    6: '{ "_0": "yyyy", "_1": "MM", "_2": "dd", "_3": "hh", "_4": "mm", "_5": "ss", "_6": "S", "_7": "q", "_8": "w" }',    parse_6_cn: { '_0': '年', '_1': '月', '_2': '日', '_3': '时', '_4': '分', '_5': '秒', '_6': '毫秒', '_7': '季度', '_8': '周' },    parse_6_en: { '_0': 'year', '_1': 'month', '_2': 'date', '_3': 'hours', '_4': 'minutes', '_5': 'seconds', '_6': 'millseconds', '_7': 'quarter', '_8': 'week' }  },  formatDate(value, fmt, lang) {    if (!value) {      value = new Date()    } else if (typeof value === 'number' || value instanceof Date) {      value = new Date(value)    } else if (typeof value === 'string') {      value = value.trim()      value = value.replace(/[-.]/g, '/')      value = new Date(value)    } else {      return value.substr(0, fmt.length)    }    fmt || (fmt = 0)    let result    typeof fmt == 'number' && (result = this.formatDateType[fmt])    const getDate = value    const o = {      'M+': getDate.getMonth() + 1,      'd+': getDate.getDate(),      'D+': getDate.getDate(),      'h+': getDate.getHours(),      'm+': getDate.getMinutes(),      's+': getDate.getSeconds(),      'S': getDate.getMilliseconds(),      'q+': Math.floor((getDate.getMonth() + 3) / 3),      'w': getDate.getDay()    }    if (/([Yy]+)/.test(result)) {      result = result.replace(RegExp.$1, (getDate.getFullYear() + '').substr(4 - RegExp.$1.length))    }    for (const k in o) {      if (new RegExp('(' + k + ')').test(result)) {        result = result.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)))      }    }    if (fmt === 6) {      const parse6 = this.formatDateType[ (lang ? 'parse_6_' + lang : 'parse_6_en') ]      for (const k in parse6) {        if (new RegExp('(' + k + ')').test(result)) {          if (parse6.hasOwnProperty(k)) {            result = result.replace(RegExp.$1, parse6[k])          }        }      }      return JSON.parse(result)    }    return result  }}const c_regexp = {  /**   * 邮箱   * @param {*} s   */  isEmail(s) {    return /^([a-zA-Z0-9._-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(s)  },  /**   * 手机号码   * @param {*} s   */  isMobile(s) {    return /^1[0-9]{10}$/.test(s)  },  /**   * 电话号码   * @param {*} s   */  isPhone(s) {    return /^([0-9]{3,4}-)?[0-9]{7,8}$/.test(s)  },  /**   * URL地址   * @param {*} s   */  isURL(s) {    return /^http[s]?:\/\/.*/.test(s)  }}const $util = { ...general, ...c_vue, ...c_ant, ...c_url, ...c_date }export default $utilexport { general, c_vue, c_ant, c_url, c_date, c_regexp }